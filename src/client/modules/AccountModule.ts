import { Account } from "../../types";
import { AccountManager } from "../../manager/AccountManager";
import { DiscordManager } from "../../manager/DiscordManager";
import { UserInterface } from "../UserInterface";

export class AccountModule {
  private accountManager: AccountManager;
  private discordManager: DiscordManager;
  private ui: UserInterface;

  constructor(
    accountManager: AccountManager,
    discordManager: DiscordManager,
    ui: UserInterface
  ) {
    this.accountManager = accountManager;
    this.discordManager = discordManager;
    this.ui = ui;
  }

  /**
   * Connect all accounts
   */
  public async connectAllAccounts(): Promise<void> {
    const accounts = this.accountManager.getAccounts();

    if (accounts.length === 0) {
      this.ui.showWarning(
        "Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng th√™m t√†i kho·∫£n tr∆∞·ªõc."
      );
      return;
    }

    this.ui.showInfo(`ƒêang k·∫øt n·ªëi ${accounts.length} t√†i kho·∫£n...`);

    for (const account of accounts) {
      const spinner = this.ui.createSpinner(
        `ƒêang k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}...`
      );
      spinner.start();

      try {
        await this.discordManager.connectAccount(account);
        spinner.succeed(`ƒê√£ k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}`);
      } catch (error) {
        spinner.fail(
          `Kh√¥ng th·ªÉ k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}`
        );
      }

      // Wait between connections to avoid rate limits
      await new Promise((resolve) => setTimeout(resolve, 2000));
    }

    this.ui.showSuccess("Ho√†n t·∫•t k·∫øt n·ªëi t√†i kho·∫£n!");
  }

  /**
   * Connect one specific account
   */
  public async connectOneAccount(): Promise<void> {
    const accounts = this.accountManager.getAccounts();

    if (accounts.length === 0) {
      this.ui.showWarning(
        "Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng th√™m t√†i kho·∫£n tr∆∞·ªõc."
      );
      return;
    }

    // Show account selection
    const { accountIndex } = await this.ui.showAccountSelection(accounts);
    const account = accounts[accountIndex];

    const spinner = this.ui.createSpinner(
      `ƒêang k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}...`
    );
    spinner.start();

    try {
      await this.discordManager.connectAccount(account);
      spinner.succeed(`ƒê√£ k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}`);
    } catch (error) {
      spinner.fail(
        `Kh√¥ng th·ªÉ k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}`
      );
    }
  }

  /**
   * Add a new account
   */
  public async addAccount(): Promise<void> {
    const accounts = this.accountManager.getAccounts();

    // Get account name and token
    const { name, token } = await this.ui.prompt<{
      name: string;
      token: string;
    }>([
      {
        type: "input",
        name: "name",
        message: "T√™n t√†i kho·∫£n (ƒë·ªÉ nh·∫≠n di·ªán):",
        default: `Account ${accounts.length + 1}`,
      },
      {
        type: "input",
        name: "token",
        message: "Token Discord:",
        validate: (input: string) =>
          input.trim() !== "" ? true : "Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      },
    ]);

    // Check for duplicate tokens
    const existingAccount = accounts.find((acc) => acc.token === token);
    if (existingAccount) {
      this.ui.showWarning(
        `Token n√†y ƒë√£ t·ªìn t·∫°i trong danh s√°ch v·ªõi t√™n "${
          existingAccount.name || "Kh√¥ng t√™n"
        }"`
      );

      const shouldContinue = await this.ui.prompt<{ continue: boolean }>([
        {
          type: "confirm",
          name: "continue",
          message: "B·∫°n v·∫´n mu·ªën th√™m t√†i kho·∫£n n√†y?",
          default: false,
        },
      ]);

      if (!shouldContinue.continue) {
        this.ui.showInfo("ƒê√£ h·ªßy th√™m t√†i kho·∫£n.");
        return;
      }
    }

    // Create spinner before trying to login
    const spinner = this.ui.createSpinner(
      "ƒêang ƒëƒÉng nh·∫≠p ƒë·ªÉ l·∫•y th√¥ng tin Discord..."
    );
    spinner.start();

    try {
      // Get Discord data
      const discordData = await this.discordManager.getDiscordData(token);
      spinner.succeed("ƒê√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng!");

      if (discordData.servers.length === 0) {
        this.ui.showWarning(
          "T√†i kho·∫£n n√†y kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o b·∫•t k·ª≥ server Discord n√†o."
        );
        this.discordManager.closeDiscordClient(discordData);
        return;
      }

      // Show server list for selection
      const { guildId } = await this.ui.prompt<{ guildId: string }>([
        {
          type: "list",
          name: "guildId",
          message: "Ch·ªçn server Discord:",
          choices: discordData.servers.map((server) => ({
            name: `${server.name} (${server.id})`,
            value: server.id,
          })),
        },
      ]);

      // Get voice channel list from selected server
      const voiceChannels = discordData.getVoiceChannels(guildId);

      if (voiceChannels.length === 0) {
        this.ui.showWarning("Server n√†y kh√¥ng c√≥ k√™nh voice n√†o.");
        this.discordManager.closeDiscordClient(discordData);
        return;
      }

      // Show voice channel list for selection
      const { channelId } = await this.ui.prompt<{ channelId: string }>([
        {
          type: "list",
          name: "channelId",
          message: "Ch·ªçn k√™nh voice:",
          choices: voiceChannels.map((channel) => ({
            name: `${channel.name} (${channel.id})`,
            value: channel.id,
          })),
        },
      ]);

      // Get audio and video settings
      const voiceSettings = await this.ui.prompt<{
        selfMute: boolean;
        selfDeaf: boolean;
        selfVideo: boolean;
      }>([
        {
          type: "confirm",
          name: "selfMute",
          message: "T·ª± ƒë·ªông t·∫Øt mic?",
          default: true,
        },
        {
          type: "confirm",
          name: "selfDeaf",
          message: "T·ª± ƒë·ªông t·∫Øt loa?",
          default: true,
        },
        {
          type: "confirm",
          name: "selfVideo",
          message: "B·∫≠t camera?",
          default: false,
        },
      ]);

      // Ask if user wants to add this account to a group
      const groups = this.accountManager.getGroups();
      let groupId: string | undefined = undefined;

      if (groups.length > 0) {
        const { addToGroup } = await this.ui.prompt<{ addToGroup: boolean }>([
          {
            type: "confirm",
            name: "addToGroup",
            message: "Th√™m t√†i kho·∫£n n√†y v√†o m·ªôt nh√≥m?",
            default: false,
          },
        ]);

        if (addToGroup) {
          const { selectedGroup } = await this.ui.prompt<{
            selectedGroup: string;
          }>([
            {
              type: "list",
              name: "selectedGroup",
              message: "Ch·ªçn nh√≥m:",
              choices: [
                ...groups.map((group) => ({
                  name: `${group.name}${
                    group.description ? ` - ${group.description}` : ""
                  }`,
                  value: group.id,
                })),
                { name: "Kh√¥ng th√™m v√†o nh√≥m n√†o", value: "none" },
              ],
            },
          ]);

          if (selectedGroup !== "none") {
            groupId = selectedGroup;
          }
        }
      }

      // Create new account and save to config
      const newAccount: Account = {
        name,
        token,
        guildId,
        channelId,
        ...voiceSettings,
        group: groupId,
      };

      this.accountManager.addAccount(newAccount);
      this.ui.showSuccess("ƒê√£ th√™m t√†i kho·∫£n m·ªõi th√†nh c√¥ng! üéâ");

      if (groupId) {
        const groupName =
          groups.find((g) => g.id === groupId)?.name || "Kh√¥ng t√™n";
        this.ui.showSuccess(
          `T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c th√™m v√†o nh√≥m "${groupName}" üìÅ`
        );
      }

      this.discordManager.closeDiscordClient(discordData);
    } catch (error: any) {
      // Make sure spinner stops with error state
      spinner.fail(
        `Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p: ${error?.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"}`
      );
      this.ui.showError(
        `Kh√¥ng th·ªÉ th√™m t√†i kho·∫£n. Vui l√≤ng ki·ªÉm tra l·∫°i token v√† th·ª≠ l·∫°i.`
      );
    }
  }

  /**
   * Edit an existing account
   */
  public async editAccount(): Promise<void> {
    const accounts = this.accountManager.getAccounts();
    const groups = this.accountManager.getGroups();

    if (accounts.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë·ªÉ ch·ªânh s·ª≠a.");
      return;
    }

    // Show account selection with group info if available
    const { accountIndex } =
      groups.length > 0
        ? await this.ui.showAccountSelectionWithGroups(accounts, groups)
        : await this.ui.showAccountSelection(accounts);

    const account = accounts[accountIndex];

    // Get basic info
    const { name, token, updateServerAndChannel } = await this.ui.prompt<{
      name: string;
      token: string;
      updateServerAndChannel: boolean;
    }>([
      {
        type: "input",
        name: "name",
        message: "T√™n t√†i kho·∫£n:",
        default: account.name,
      },
      {
        type: "input",
        name: "token",
        message: "Token Discord:",
        default: account.token,
        validate: (input: string) => {
          if (input.trim() === "") return "Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";

          // Check for duplicate tokens
          const duplicateAccount = accounts.find(
            (acc, idx) => acc.token === input && idx !== accountIndex
          );

          if (duplicateAccount) {
            return `Token n√†y ƒë√£ t·ªìn t·∫°i trong danh s√°ch v·ªõi t√™n "${
              duplicateAccount.name || "Kh√¥ng t√™n"
            }"`;
          }

          return true;
        },
      },
      {
        type: "confirm",
        name: "updateServerAndChannel",
        message: "B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t server v√† k√™nh voice kh√¥ng?",
        default: false,
      },
    ]);

    let guildId = account.guildId;
    let channelId = account.channelId;

    // If user wants to update server and channel
    if (updateServerAndChannel) {
      try {
        // Get Discord data
        const spinner = this.ui.createSpinner(
          "ƒêang ƒëƒÉng nh·∫≠p ƒë·ªÉ l·∫•y th√¥ng tin Discord..."
        );
        spinner.start();

        const discordData = await this.discordManager.getDiscordData(token);
        spinner.succeed("ƒê√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng!");

        if (discordData.servers.length === 0) {
          this.ui.showWarning(
            "T√†i kho·∫£n n√†y kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o b·∫•t k·ª≥ server Discord n√†o."
          );
          this.discordManager.closeDiscordClient(discordData);
          return;
        }

        // Show server list for selection
        const serverSelection = await this.ui.prompt<{ guildId: string }>([
          {
            type: "list",
            name: "guildId",
            message: "Ch·ªçn server Discord:",
            choices: discordData.servers.map((server) => ({
              name: `${server.name} (${server.id})`,
              value: server.id,
            })),
            default: discordData.servers.findIndex(
              (s) => s.id === account.guildId
            ),
          },
        ]);

        guildId = serverSelection.guildId;

        // Get voice channel list from selected server
        const voiceChannels = discordData.getVoiceChannels(guildId);

        if (voiceChannels.length === 0) {
          this.ui.showWarning("Server n√†y kh√¥ng c√≥ k√™nh voice n√†o.");
          this.discordManager.closeDiscordClient(discordData);
          return;
        }

        // Show voice channel list for selection
        const channelSelection = await this.ui.prompt<{ channelId: string }>([
          {
            type: "list",
            name: "channelId",
            message: "Ch·ªçn k√™nh voice:",
            choices: voiceChannels.map((channel) => ({
              name: `${channel.name} (${channel.id})`,
              value: channel.id,
            })),
            default: voiceChannels.findIndex((c) => c.id === account.channelId),
          },
        ]);

        channelId = channelSelection.channelId;
        this.discordManager.closeDiscordClient(discordData);
      } catch (error) {
        this.ui.showError(`L·ªói khi c·∫≠p nh·∫≠t server v√† k√™nh: ${error}`);
        return;
      }
    }

    // Get audio and video settings
    const voiceSettings = await this.ui.prompt<{
      selfMute: boolean;
      selfDeaf: boolean;
      selfVideo: boolean;
    }>([
      {
        type: "confirm",
        name: "selfMute",
        message: "T·ª± ƒë·ªông t·∫Øt mic?",
        default: account.selfMute,
      },
      {
        type: "confirm",
        name: "selfDeaf",
        message: "T·ª± ƒë·ªông t·∫Øt loa?",
        default: account.selfDeaf,
      },
      {
        type: "confirm",
        name: "selfVideo",
        message: "B·∫≠t camera?",
        default: account.selfVideo,
      },
    ]);

    // Ask if user wants to change group
    let groupId = account.group;

    if (groups.length > 0) {
      const { updateGroup } = await this.ui.prompt<{ updateGroup: boolean }>([
        {
          type: "confirm",
          name: "updateGroup",
          message: "B·∫°n c√≥ mu·ªën thay ƒë·ªïi nh√≥m cho t√†i kho·∫£n n√†y?",
          default: false,
        },
      ]);

      if (updateGroup) {
        // Get current group name if assigned
        let currentGroupName = "Ch∆∞a ph√¢n nh√≥m";
        if (account.group) {
          const currentGroup = groups.find((g) => g.id === account.group);
          if (currentGroup) {
            currentGroupName = currentGroup.name;
          }
        }

        const { selectedGroup } = await this.ui.prompt<{
          selectedGroup: string;
        }>([
          {
            type: "list",
            name: "selectedGroup",
            message: `Ch·ªçn nh√≥m (hi·ªán t·∫°i: ${currentGroupName}):`,
            choices: [
              ...groups.map((group) => ({
                name: `${group.name}${
                  group.description ? ` - ${group.description}` : ""
                }`,
                value: group.id,
              })),
              { name: "Kh√¥ng thu·ªôc nh√≥m n√†o", value: "none" },
            ],
            default: groups.findIndex((g) => g.id === account.group),
          },
        ]);

        if (selectedGroup === "none") {
          groupId = undefined;
        } else {
          groupId = selectedGroup;
        }
      }
    }

    // Update account and save to config
    const updatedAccount: Account = {
      name,
      token,
      guildId,
      channelId,
      ...voiceSettings,
      group: groupId,
    };

    this.accountManager.updateAccount(accountIndex, updatedAccount);
    this.ui.showSuccess("ƒê√£ c·∫≠p nh·∫≠t t√†i kho·∫£n th√†nh c√¥ng! üîÑ");

    if (groupId !== account.group) {
      if (!groupId) {
        this.ui.showInfo("T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi nh√≥m.");
      } else {
        const groupName =
          groups.find((g) => g.id === groupId)?.name || "Kh√¥ng t√™n";
        this.ui.showInfo(`T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c th√™m v√†o nh√≥m "${groupName}".`);
      }
    }
  }

  /**
   * Delete an account
   */
  public async deleteAccount(): Promise<void> {
    const accounts = this.accountManager.getAccounts();
    const groups = this.accountManager.getGroups();

    if (accounts.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë·ªÉ x√≥a.");
      return;
    }

    // Show account selection
    const { accountIndex } =
      groups.length > 0
        ? await this.ui.showAccountSelectionWithGroups(accounts, groups)
        : await this.ui.showAccountSelection(accounts);

    // Confirm deletion
    const confirm = await this.ui.showConfirmDelete(
      accounts[accountIndex].name
    );

    if (confirm) {
      this.accountManager.deleteAccount(accountIndex);
      this.ui.showSuccess("ƒê√£ x√≥a t√†i kho·∫£n th√†nh c√¥ng! üóëÔ∏è");
    } else {
      this.ui.showInfo("ƒê√£ h·ªßy x√≥a t√†i kho·∫£n.");
    }
  }
}