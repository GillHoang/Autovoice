import * as process from 'process';
import chalk from 'chalk';
import { Account, Group } from '../types';
import { AccountManager } from '../manager/AccountManager';
import { DiscordManager } from '../manager/DiscordManager';
import { UserInterface } from './UserInterface';
import { ConfigManager } from '../manager/ConfigManager';
import { v4 as uuidv4 } from 'uuid';

/**
 * Classe principale de l'application
 */
export class Application {
  private accountManager: AccountManager;
  private discordManager: DiscordManager;
  private ui: UserInterface;
  private isShuttingDown: boolean = false;
  private statusMonitorInterval: NodeJS.Timeout | null = null;

  constructor() {
    const configManager = new ConfigManager();
    this.ui = new UserInterface();
    this.accountManager = new AccountManager(configManager);
    this.discordManager = new DiscordManager(this.ui);

    // Use the newer signal handling for Node.js compatibility
    this.setupSignalHandlers();
  }

  /**
   * Set up signal handlers for graceful shutdown
   */
  private setupSignalHandlers(): void {
    // Using AbortSignal.addEventListener - more compatible with newer Node.js versions
    const signals = ['SIGINT', 'SIGTERM', 'SIGHUP'] as const;
    
    for (const signal of signals) {
      try {
        // Use AbortSignal for event handling to avoid direct process.on issues
        const abortController = new AbortController();
        const { signal: abortSignal } = abortController;
        
        process.on(signal, () => {
          if (!this.isShuttingDown) {
            this.isShuttingDown = true;
            this.ui.showInfo('\nƒêang tho√°t ch∆∞∆°ng tr√¨nh...');
            this.discordManager.disconnectAll();
            process.exit(0);
          }
        });
      } catch (error) {
        // Fallback for older Node versions if needed
        console.warn(`Could not set up "${signal}" handler using AbortController. Using fallback.`);
      }
    }
  }

  /**
   * D√©marrer l'application
   */
  async start(): Promise<void> {
    this.ui.showBanner();
    this.ui.showInfo('=== Discord Autovoice Tool N√¢ng Cao ===');
    await this.showMainMenu();
  }

  /**
   * Afficher le menu principal
   */
  private async showMainMenu(): Promise<void> {
    try {
      const { action } = await this.ui.showMainMenu();

      switch (action) {
        case 'connectAll':
          await this.connectAllAccounts();
          break;
        case 'connectOne':
          await this.connectOneAccount();
          break;
        case 'manageGroups':
          await this.manageGroups();
          break;
        case 'addAccount':
          await this.addAccount();
          break;
        case 'editAccount':
          await this.editAccount();
          break;
        case 'deleteAccount':
          await this.deleteAccount();
          break;
        case 'disconnectAll':
          this.discordManager.disconnectAll();
          break;
        case 'statusMonitor':
          await this.showStatusMonitor();
          break;
        case 'scheduleAccounts':
          await this.manageSchedules();
          break;
        case 'exit':
          this.ui.showInfo('T·∫°m bi·ªát!');
          process.exit(0);
          break;
      }

      // Return to main menu after action
      await this.showMainMenu();
    } catch (error) {
      this.ui.showError(`L·ªói trong menu ch√≠nh: ${error}`);
      this.discordManager.disconnectAll();
    }
  }

  /**
   * Qu·∫£n l√Ω nh√≥m t√†i kho·∫£n
   */
  private async manageGroups(): Promise<void> {
    try {
      const { action } = await this.ui.showGroupManagementMenu();

      switch (action) {
        case 'viewGroups':
          await this.viewGroups();
          break;
        case 'createGroup':
          await this.createGroup();
          break;
        case 'editGroup':
          await this.editGroup();
          break;
        case 'deleteGroup':
          await this.deleteGroup();
          break;
        case 'addAccountToGroup':
          await this.addAccountToGroup();
          break;
        case 'removeAccountFromGroup':
          await this.removeAccountFromGroup();
          break;
        case 'connectByGroup':
          await this.connectAccountsByGroup();
          break;
        case 'back':
          return;
      }

      // Return to group management menu after action
      await this.manageGroups();
    } catch (error) {
      this.ui.showError(`L·ªói khi qu·∫£n l√Ω nh√≥m: ${error}`);
    }
  }

  /**
   * Xem danh s√°ch nh√≥m v√† c√°c t√†i kho·∫£n trong m·ªói nh√≥m
   */
  private async viewGroups(): Promise<void> {
    const groups = this.accountManager.getGroups();
    const accounts = this.accountManager.getAccounts();

    if (groups.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ nh√≥m n√†o ƒë∆∞·ª£c t·∫°o. Vui l√≤ng t·∫°o nh√≥m tr∆∞·ªõc.");
      return;
    }

    this.ui.showInfo("=== Danh s√°ch nh√≥m ===");
    
    groups.forEach(group => {
      const groupAccounts = accounts.filter(acc => acc.group === group.id);
      console.log(`\nüìÅ ${group.name}${group.description ? ` - ${group.description}` : ''}`);
      console.log(`   ID: ${group.id}`);
      console.log(`   S·ªë t√†i kho·∫£n: ${groupAccounts.length}`);
      
      if (groupAccounts.length > 0) {
        console.log(`   Danh s√°ch t√†i kho·∫£n:`);
        groupAccounts.forEach((acc, idx) => {
          console.log(`     ${idx + 1}. ${acc.name || 'Kh√¥ng t√™n'} (${acc.token.substring(0, 10)}...)`);
        });
      } else {
        console.log(`   Ch∆∞a c√≥ t√†i kho·∫£n n√†o trong nh√≥m n√†y.`);
      }
    });

    // Show ungrouped accounts
    const ungroupedAccounts = accounts.filter(acc => !acc.group);
    if (ungroupedAccounts.length > 0) {
      console.log(`\nüìÅ T√†i kho·∫£n ch∆∞a ph√¢n nh√≥m (${ungroupedAccounts.length}):`);
      ungroupedAccounts.forEach((acc, idx) => {
        console.log(`   ${idx + 1}. ${acc.name || 'Kh√¥ng t√™n'} (${acc.token.substring(0, 10)}...)`);
      });
    }

    // Wait for user to press enter to continue
    await this.ui.prompt([
      {
        type: 'input',
        name: 'continue',
        message: 'Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...'
      }
    ]);
  }

  /**
   * T·∫°o nh√≥m m·ªõi
   */
  private async createGroup(): Promise<void> {
    const { name, description } = await this.ui.prompt<{ name: string, description: string }>([
      {
        type: 'input',
        name: 'name',
        message: 'T√™n nh√≥m:',
        validate: (input: string) => input.trim() !== '' ? true : 'T√™n nh√≥m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
      },
      {
        type: 'input',
        name: 'description',
        message: 'M√¥ t·∫£ (t√πy ch·ªçn):',
      }
    ]);

    const newGroup = this.accountManager.addGroup({ name, description });
    this.ui.showSuccess(`ƒê√£ t·∫°o nh√≥m "${name}" th√†nh c√¥ng! üéâ`);
    
    // Ask if user wants to add accounts to this group
    const { addAccounts } = await this.ui.prompt<{ addAccounts: boolean }>([
      {
        type: 'confirm',
        name: 'addAccounts',
        message: 'B·∫°n c√≥ mu·ªën th√™m t√†i kho·∫£n v√†o nh√≥m n√†y kh√¥ng?',
        default: true
      }
    ]);

    if (addAccounts) {
      await this.addAccountsToSpecificGroup(newGroup.id, newGroup.name);
    }
  }

  /**
   * Ch·ªânh s·ª≠a nh√≥m
   */
  private async editGroup(): Promise<void> {
    const groups = this.accountManager.getGroups();
    
    if (groups.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ nh√≥m n√†o ƒë·ªÉ ch·ªânh s·ª≠a.");
      return;
    }

    try {
      // Show group selection
      const { groupId } = await this.ui.showGroupSelection(groups);
      const group = groups.find(g => g.id === groupId);
      
      if (!group) {
        this.ui.showError("Kh√¥ng t√¨m th·∫•y nh√≥m. Vui l√≤ng th·ª≠ l·∫°i.");
        return;
      }

      // Get new group info
      const { name, description } = await this.ui.prompt<{ name: string, description: string }>([
        {
          type: 'input',
          name: 'name',
          message: 'T√™n nh√≥m m·ªõi:',
          default: group.name,
          validate: (input: string) => input.trim() !== '' ? true : 'T√™n nh√≥m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
        },
        {
          type: 'input',
          name: 'description',
          message: 'M√¥ t·∫£ m·ªõi (t√πy ch·ªçn):',
          default: group.description || ''
        }
      ]);

      // Update group
      const updatedGroup = this.accountManager.updateGroup(groupId, { name, description });
      
      if (updatedGroup) {
        this.ui.showSuccess(`ƒê√£ c·∫≠p nh·∫≠t nh√≥m th√†nh c√¥ng! üîÑ`);
      } else {
        this.ui.showError("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t nh√≥m. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } catch (error) {
      this.ui.showError(`L·ªói khi ch·ªânh s·ª≠a nh√≥m: ${error}`);
    }
  }

  /**
   * X√≥a nh√≥m
   */
  private async deleteGroup(): Promise<void> {
    const groups = this.accountManager.getGroups();
    
    if (groups.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ nh√≥m n√†o ƒë·ªÉ x√≥a.");
      return;
    }

    try {
      // Show group selection
      const { groupId } = await this.ui.showGroupSelection(groups);
      const group = groups.find(g => g.id === groupId);
      
      if (!group) {
        this.ui.showError("Kh√¥ng t√¨m th·∫•y nh√≥m. Vui l√≤ng th·ª≠ l·∫°i.");
        return;
      }

      // Confirm deletion
      const { confirm } = await this.ui.prompt<{ confirm: boolean }>([
        {
          type: 'confirm',
          name: 'confirm',
          message: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√≥m "${group.name}"? T√†i kho·∫£n s·∫Ω kh√¥ng b·ªã x√≥a.`,
          default: false
        }
      ]);

      if (!confirm) {
        this.ui.showInfo("ƒê√£ h·ªßy x√≥a nh√≥m.");
        return;
      }

      // Delete group
      const success = this.accountManager.deleteGroup(groupId);
      
      if (success) {
        this.ui.showSuccess(`ƒê√£ x√≥a nh√≥m "${group.name}" th√†nh c√¥ng! üóëÔ∏è`);
      } else {
        this.ui.showError("Kh√¥ng th·ªÉ x√≥a nh√≥m. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } catch (error) {
      this.ui.showError(`L·ªói khi x√≥a nh√≥m: ${error}`);
    }
  }

  /**
   * Th√™m t√†i kho·∫£n v√†o nh√≥m
   */
  private async addAccountToGroup(): Promise<void> {
    const groups = this.accountManager.getGroups();
    
    if (groups.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ nh√≥m n√†o. Vui l√≤ng t·∫°o nh√≥m tr∆∞·ªõc.");
      return;
    }

    try {
      // Show group selection
      const { groupId } = await this.ui.showGroupSelection(groups);
      const group = groups.find(g => g.id === groupId);
      
      if (!group) {
        this.ui.showError("Kh√¥ng t√¨m th·∫•y nh√≥m. Vui l√≤ng th·ª≠ l·∫°i.");
        return;
      }

      await this.addAccountsToSpecificGroup(groupId, group.name);
    } catch (error) {
      this.ui.showError(`L·ªói khi th√™m t√†i kho·∫£n v√†o nh√≥m: ${error}`);
    }
  }

  /**
   * Th√™m t√†i kho·∫£n v√†o m·ªôt nh√≥m c·ª• th·ªÉ
   */
  private async addAccountsToSpecificGroup(groupId: string, groupName: string): Promise<void> {
    const allAccounts = this.accountManager.getAccounts();
    const unassignedAccounts = allAccounts.filter(acc => acc.group !== groupId);
    const groups = this.accountManager.getGroups();
    
    if (unassignedAccounts.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë·ªÉ th√™m v√†o nh√≥m.");
      return;
    }

    // Show multi-select for accounts
    const { selectedAccountIndices } = await this.ui.prompt<{ selectedAccountIndices: number[] }>([
      {
        type: 'checkbox',
        name: 'selectedAccountIndices',
        message: `Ch·ªçn c√°c t√†i kho·∫£n ƒë·ªÉ th√™m v√†o nh√≥m "${groupName}":`,
        choices: unassignedAccounts.map((acc, idx) => {
          const accountIndex = allAccounts.findIndex(a => a.token === acc.token);
          let displayName = `${acc.name || 'Kh√¥ng t√™n'} (${acc.token.substring(0, 10)}...)`;
          
          // Add current group info if account is in a different group
          if (acc.group) {
            const currentGroup = groups.find(g => g.id === acc.group);
            if (currentGroup) {
              displayName += ` [Hi·ªán t·∫°i: ${currentGroup.name}]`;
            }
          }
          
          return {
            name: displayName,
            value: accountIndex,
            checked: false
          };
        })
      }
    ]);

    if (selectedAccountIndices.length === 0) {
      this.ui.showInfo("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c ch·ªçn.");
      return;
    }

    // Add accounts to group
    let successCount = 0;
    for (const accountIndex of selectedAccountIndices) {
      const result = this.accountManager.assignAccountToGroup(accountIndex, groupId);
      if (result) successCount++;
    }

    this.ui.showSuccess(`ƒê√£ th√™m ${successCount} t√†i kho·∫£n v√†o nh√≥m "${groupName}"! üîÑ`);
  }

  /**
   * X√≥a t√†i kho·∫£n kh·ªèi nh√≥m
   */
  private async removeAccountFromGroup(): Promise<void> {
    const groups = this.accountManager.getGroups();
    const accounts = this.accountManager.getAccounts();
    const groupedAccounts = accounts.filter(acc => acc.group !== undefined);
    
    if (groupedAccounts.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ t√†i kho·∫£n n√†o trong nh√≥m.");
      return;
    }

    try {
      // Create a map for faster group lookup
      const groupMap = new Map<string, Group>();
      for (const group of groups) {
        groupMap.set(group.id, group);
      }

      // Show account selection
      const { accountIndices } = await this.ui.prompt<{ accountIndices: number[] }>([
        {
          type: 'checkbox',
          name: 'accountIndices',
          message: 'Ch·ªçn t√†i kho·∫£n ƒë·ªÉ x√≥a kh·ªèi nh√≥m:',
          choices: groupedAccounts.map((acc, idx) => {
            const accountIndex = accounts.findIndex(a => a.token === acc.token);
            const group = acc.group ? groupMap.get(acc.group) : undefined;
            
            return {
              name: `${acc.name || 'Kh√¥ng t√™n'} (${acc.token.substring(0, 10)}...) [Nh√≥m: ${group?.name || 'Kh√¥ng x√°c ƒë·ªãnh'}]`,
              value: accountIndex,
              checked: false
            };
          })
        }
      ]);

      if (accountIndices.length === 0) {
        this.ui.showInfo("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c ch·ªçn.");
        return;
      }

      // Remove accounts from groups
      let successCount = 0;
      for (const accountIndex of accountIndices) {
        const result = this.accountManager.assignAccountToGroup(accountIndex, undefined);
        if (result) successCount++;
      }

      this.ui.showSuccess(`ƒê√£ x√≥a ${successCount} t√†i kho·∫£n kh·ªèi nh√≥m! üîÑ`);
    } catch (error) {
      this.ui.showError(`L·ªói khi x√≥a t√†i kho·∫£n kh·ªèi nh√≥m: ${error}`);
    }
  }

  /**
   * K·∫øt n·ªëi t√†i kho·∫£n theo nh√≥m
   */
  private async connectAccountsByGroup(): Promise<void> {
    const groups = this.accountManager.getGroups();
    
    if (groups.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ nh√≥m n√†o. Vui l√≤ng t·∫°o nh√≥m tr∆∞·ªõc.");
      return;
    }

    // Add "ungrouped accounts" option
    const groupChoices = [
      ...groups.map(group => ({
        name: `${group.name}${group.description ? ` - ${group.description}` : ''} (${this.accountManager.getAccountsByGroup(group.id).length} t√†i kho·∫£n)`,
        value: group.id
      })),
      {
        name: `T√†i kho·∫£n ch∆∞a ph√¢n nh√≥m (${this.accountManager.getUngroupedAccounts().length} t√†i kho·∫£n)`,
        value: 'ungrouped'
      }
    ];

    try {
      // Show group selection
      const { selectedGroup } = await this.ui.prompt<{ selectedGroup: string }>([
        {
          type: 'list',
          name: 'selectedGroup',
          message: 'Ch·ªçn nh√≥m ƒë·ªÉ k·∫øt n·ªëi:',
          choices: groupChoices
        }
      ]);

      // Get accounts in selected group
      let accountsToConnect: Account[];
      let groupName: string;
      
      if (selectedGroup === 'ungrouped') {
        accountsToConnect = this.accountManager.getUngroupedAccounts();
        groupName = "Ch∆∞a ph√¢n nh√≥m";
      } else {
        accountsToConnect = this.accountManager.getAccountsByGroup(selectedGroup);
        groupName = groups.find(g => g.id === selectedGroup)?.name || "Nh√≥m kh√¥ng x√°c ƒë·ªãnh";
      }

      if (accountsToConnect.length === 0) {
        this.ui.showWarning(`Kh√¥ng c√≥ t√†i kho·∫£n n√†o trong nh√≥m "${groupName}".`);
        return;
      }

      // Confirm connection
      const { confirm } = await this.ui.prompt<{ confirm: boolean }>([
        {
          type: 'confirm',
          name: 'confirm',
          message: `K·∫øt n·ªëi ${accountsToConnect.length} t√†i kho·∫£n trong nh√≥m "${groupName}"?`,
          default: true
        }
      ]);

      if (!confirm) {
        this.ui.showInfo("ƒê√£ h·ªßy k·∫øt n·ªëi t√†i kho·∫£n.");
        return;
      }

      // Connect accounts
      this.ui.showInfo(`ƒêang k·∫øt n·ªëi ${accountsToConnect.length} t√†i kho·∫£n trong nh√≥m "${groupName}"...`);

      for (const account of accountsToConnect) {
        const spinner = this.ui.createSpinner(`ƒêang k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}...`);
        spinner.start();
        
        try {
          await this.discordManager.connectAccount(account);
          spinner.succeed(`ƒê√£ k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}`);
        } catch (error) {
          spinner.fail(`Kh√¥ng th·ªÉ k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}`);
        }
        
        // Wait between connections to avoid rate limits
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
      
      this.ui.showSuccess(`Ho√†n t·∫•t k·∫øt n·ªëi t√†i kho·∫£n trong nh√≥m "${groupName}"! üéâ`);
    } catch (error) {
      this.ui.showError(`L·ªói khi k·∫øt n·ªëi t√†i kho·∫£n theo nh√≥m: ${error}`);
    }
  }

  /**
   * Connect all accounts
   */
  private async connectAllAccounts(): Promise<void> {
    const accounts = this.accountManager.getAccounts();

    if (accounts.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng th√™m t√†i kho·∫£n tr∆∞·ªõc.");
      return;
    }

    this.ui.showInfo(`ƒêang k·∫øt n·ªëi ${accounts.length} t√†i kho·∫£n...`);

    for (const account of accounts) {
      const spinner = this.ui.createSpinner(`ƒêang k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}...`);
      spinner.start();
      
      try {
        await this.discordManager.connectAccount(account);
        spinner.succeed(`ƒê√£ k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}`);
      } catch (error) {
        spinner.fail(`Kh√¥ng th·ªÉ k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}`);
      }
      
      // Wait between connections to avoid rate limits
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    this.ui.showSuccess("Ho√†n t·∫•t k·∫øt n·ªëi t√†i kho·∫£n!");
  }

  /**
   * Connect one specific account
   */
  private async connectOneAccount(): Promise<void> {
    const accounts = this.accountManager.getAccounts();

    if (accounts.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng th√™m t√†i kho·∫£n tr∆∞·ªõc.");
      return;
    }

    // Show account selection
    const { accountIndex } = await this.ui.showAccountSelection(accounts);
    const account = accounts[accountIndex];

    const spinner = this.ui.createSpinner(`ƒêang k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}...`);
    spinner.start();
    
    try {
      await this.discordManager.connectAccount(account);
      spinner.succeed(`ƒê√£ k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}`);
    } catch (error) {
      spinner.fail(`Kh√¥ng th·ªÉ k·∫øt n·ªëi ${account.name || "T√†i kho·∫£n kh√¥ng t√™n"}`);
    }
  }

  /**
   * Add a new account
   */
  private async addAccount(): Promise<void> {
    const accounts = this.accountManager.getAccounts();

    // Get account name and token
    const { name, token } = await this.ui.prompt<{name: string, token: string}>([
      {
        type: "input",
        name: "name",
        message: "T√™n t√†i kho·∫£n (ƒë·ªÉ nh·∫≠n di·ªán):",
        default: `Account ${accounts.length + 1}`,
      },
      {
        type: "input",
        name: "token",
        message: "Token Discord:",
        validate: (input: string) => input.trim() !== "" ? true : "Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
      }
    ]);

    // Check for duplicate tokens
    const existingAccount = accounts.find(acc => acc.token === token);
    if (existingAccount) {
      this.ui.showWarning(`Token n√†y ƒë√£ t·ªìn t·∫°i trong danh s√°ch v·ªõi t√™n "${existingAccount.name || 'Kh√¥ng t√™n'}"`);
      
      const shouldContinue = await this.ui.prompt<{continue: boolean}>([
        {
          type: "confirm",
          name: "continue",
          message: "B·∫°n v·∫´n mu·ªën th√™m t√†i kho·∫£n n√†y?",
          default: false,
        }
      ]);
      
      if (!shouldContinue.continue) {
        this.ui.showInfo("ƒê√£ h·ªßy th√™m t√†i kho·∫£n.");
        return;
      }
    }

    // Create spinner before trying to login
    const spinner = this.ui.createSpinner("ƒêang ƒëƒÉng nh·∫≠p ƒë·ªÉ l·∫•y th√¥ng tin Discord...");
    spinner.start();
    
    try {
      // Get Discord data
      const discordData = await this.discordManager.getDiscordData(token);
      spinner.succeed("ƒê√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng!");
      
      if (discordData.servers.length === 0) {
        this.ui.showWarning("T√†i kho·∫£n n√†y kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o b·∫•t k·ª≥ server Discord n√†o.");
        this.discordManager.closeDiscordClient(discordData);
        return;
      }

      // Show server list for selection
      const { guildId } = await this.ui.prompt<{guildId: string}>([
        {
          type: "list",
          name: "guildId",
          message: "Ch·ªçn server Discord:",
          choices: discordData.servers.map(server => ({
            name: `${server.name} (${server.id})`,
            value: server.id
          }))
        }
      ]);

      // Get voice channel list from selected server
      const voiceChannels = discordData.getVoiceChannels(guildId);
      
      if (voiceChannels.length === 0) {
        this.ui.showWarning("Server n√†y kh√¥ng c√≥ k√™nh voice n√†o.");
        this.discordManager.closeDiscordClient(discordData);
        return;
      }

      // Show voice channel list for selection
      const { channelId } = await this.ui.prompt<{channelId: string}>([
        {
          type: "list",
          name: "channelId",
          message: "Ch·ªçn k√™nh voice:",
          choices: voiceChannels.map(channel => ({
            name: `${channel.name} (${channel.id})`,
            value: channel.id
          }))
        }
      ]);

      // Get audio and video settings
      const voiceSettings = await this.ui.prompt<{selfMute: boolean, selfDeaf: boolean, selfVideo: boolean}>([
        {
          type: "confirm",
          name: "selfMute",
          message: "T·ª± ƒë·ªông t·∫Øt mic?",
          default: true,
        },
        {
          type: "confirm",
          name: "selfDeaf",
          message: "T·ª± ƒë·ªông t·∫Øt loa?",
          default: true,
        },
        {
          type: "confirm",
          name: "selfVideo",
          message: "B·∫≠t camera?",
          default: false,
        }
      ]);

      // Ask if user wants to add this account to a group
      const groups = this.accountManager.getGroups();
      let groupId: string | undefined = undefined;

      if (groups.length > 0) {
        const { addToGroup } = await this.ui.prompt<{ addToGroup: boolean }>([
          {
            type: "confirm",
            name: "addToGroup",
            message: "Th√™m t√†i kho·∫£n n√†y v√†o m·ªôt nh√≥m?",
            default: false,
          }
        ]);

        if (addToGroup) {
          const { selectedGroup } = await this.ui.prompt<{ selectedGroup: string }>([
            {
              type: "list",
              name: "selectedGroup",
              message: "Ch·ªçn nh√≥m:",
              choices: [
                ...groups.map(group => ({
                  name: `${group.name}${group.description ? ` - ${group.description}` : ''}`,
                  value: group.id
                })),
                { name: "Kh√¥ng th√™m v√†o nh√≥m n√†o", value: "none" }
              ]
            }
          ]);

          if (selectedGroup !== "none") {
            groupId = selectedGroup;
          }
        }
      }

      // Create new account and save to config
      const newAccount: Account = {
        name,
        token,
        guildId,
        channelId,
        ...voiceSettings,
        group: groupId
      };

      this.accountManager.addAccount(newAccount);
      this.ui.showSuccess("ƒê√£ th√™m t√†i kho·∫£n m·ªõi th√†nh c√¥ng! üéâ");
      
      if (groupId) {
        const groupName = groups.find(g => g.id === groupId)?.name || "Kh√¥ng t√™n";
        this.ui.showSuccess(`T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c th√™m v√†o nh√≥m "${groupName}" üìÅ`);
      }
      
      this.discordManager.closeDiscordClient(discordData);

    } catch (error: any) {
      // Make sure spinner stops with error state
      spinner.fail(`Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p: ${error?.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
      this.ui.showError(`Kh√¥ng th·ªÉ th√™m t√†i kho·∫£n. Vui l√≤ng ki·ªÉm tra l·∫°i token v√† th·ª≠ l·∫°i.`);
    }
  }

  /**
   * Edit an existing account
   */
  private async editAccount(): Promise<void> {
    const accounts = this.accountManager.getAccounts();
    const groups = this.accountManager.getGroups();

    if (accounts.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë·ªÉ ch·ªânh s·ª≠a.");
      return;
    }

    // Show account selection with group info if available
    const { accountIndex } = groups.length > 0 
      ? await this.ui.showAccountSelectionWithGroups(accounts, groups)
      : await this.ui.showAccountSelection(accounts);
      
    const account = accounts[accountIndex];

    // Get basic info
    const { name, token, updateServerAndChannel } = await this.ui.prompt<{
      name: string, 
      token: string, 
      updateServerAndChannel: boolean
    }>([
      {
        type: "input",
        name: "name",
        message: "T√™n t√†i kho·∫£n:",
        default: account.name,
      },
      {
        type: "input",
        name: "token",
        message: "Token Discord:",
        default: account.token,
        validate: (input: string) => {
          if (input.trim() === "") return "Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
          
          // Check for duplicate tokens
          const duplicateAccount = accounts.find(
            (acc, idx) => acc.token === input && idx !== accountIndex
          );
          
          if (duplicateAccount) {
            return `Token n√†y ƒë√£ t·ªìn t·∫°i trong danh s√°ch v·ªõi t√™n "${duplicateAccount.name || 'Kh√¥ng t√™n'}"`;
          }
          
          return true;
        },
      },
      {
        type: "confirm",
        name: "updateServerAndChannel",
        message: "B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t server v√† k√™nh voice kh√¥ng?",
        default: false,
      }
    ]);

    let guildId = account.guildId;
    let channelId = account.channelId;

    // If user wants to update server and channel
    if (updateServerAndChannel) {
      try {
        // Get Discord data
        const spinner = this.ui.createSpinner("ƒêang ƒëƒÉng nh·∫≠p ƒë·ªÉ l·∫•y th√¥ng tin Discord...");
        spinner.start();
        
        const discordData = await this.discordManager.getDiscordData(token);
        spinner.succeed("ƒê√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng!");
        
        if (discordData.servers.length === 0) {
          this.ui.showWarning("T√†i kho·∫£n n√†y kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o b·∫•t k·ª≥ server Discord n√†o.");
          this.discordManager.closeDiscordClient(discordData);
          return;
        }

        // Show server list for selection
        const serverSelection = await this.ui.prompt<{guildId: string}>([
          {
            type: "list",
            name: "guildId",
            message: "Ch·ªçn server Discord:",
            choices: discordData.servers.map(server => ({
              name: `${server.name} (${server.id})`,
              value: server.id
            })),
            default: discordData.servers.findIndex(s => s.id === account.guildId)
          }
        ]);

        guildId = serverSelection.guildId;

        // Get voice channel list from selected server
        const voiceChannels = discordData.getVoiceChannels(guildId);
        
        if (voiceChannels.length === 0) {
          this.ui.showWarning("Server n√†y kh√¥ng c√≥ k√™nh voice n√†o.");
          this.discordManager.closeDiscordClient(discordData);
          return;
        }

        // Show voice channel list for selection
        const channelSelection = await this.ui.prompt<{channelId: string}>([
          {
            type: "list",
            name: "channelId",
            message: "Ch·ªçn k√™nh voice:",
            choices: voiceChannels.map(channel => ({
              name: `${channel.name} (${channel.id})`,
              value: channel.id
            })),
            default: voiceChannels.findIndex(c => c.id === account.channelId)
          }
        ]);

        channelId = channelSelection.channelId;
        this.discordManager.closeDiscordClient(discordData);
      } catch (error) {
        this.ui.showError(`L·ªói khi c·∫≠p nh·∫≠t server v√† k√™nh: ${error}`);
        return;
      }
    }

    // Get audio and video settings
    const voiceSettings = await this.ui.prompt<{selfMute: boolean, selfDeaf: boolean, selfVideo: boolean}>([
      {
        type: "confirm",
        name: "selfMute",
        message: "T·ª± ƒë·ªông t·∫Øt mic?",
        default: account.selfMute,
      },
      {
        type: "confirm",
        name: "selfDeaf",
        message: "T·ª± ƒë·ªông t·∫Øt loa?",
        default: account.selfDeaf,
      },
      {
        type: "confirm",
        name: "selfVideo",
        message: "B·∫≠t camera?",
        default: account.selfVideo,
      }
    ]);

    // Ask if user wants to change group
    let groupId = account.group;
    
    if (groups.length > 0) {
      const { updateGroup } = await this.ui.prompt<{ updateGroup: boolean }>([
        {
          type: "confirm",
          name: "updateGroup",
          message: "B·∫°n c√≥ mu·ªën thay ƒë·ªïi nh√≥m cho t√†i kho·∫£n n√†y?",
          default: false,
        }
      ]);

      if (updateGroup) {
        // Get current group name if assigned
        let currentGroupName = "Ch∆∞a ph√¢n nh√≥m";
        if (account.group) {
          const currentGroup = groups.find(g => g.id === account.group);
          if (currentGroup) {
            currentGroupName = currentGroup.name;
          }
        }

        const { selectedGroup } = await this.ui.prompt<{ selectedGroup: string }>([
          {
            type: "list",
            name: "selectedGroup",
            message: `Ch·ªçn nh√≥m (hi·ªán t·∫°i: ${currentGroupName}):`,
            choices: [
              ...groups.map(group => ({
                name: `${group.name}${group.description ? ` - ${group.description}` : ''}`,
                value: group.id
              })),
              { name: "Kh√¥ng thu·ªôc nh√≥m n√†o", value: "none" }
            ],
            default: groups.findIndex(g => g.id === account.group)
          }
        ]);

        if (selectedGroup === "none") {
          groupId = undefined;
        } else {
          groupId = selectedGroup;
        }
      }
    }

    // Update account and save to config
    const updatedAccount: Account = {
      name,
      token,
      guildId,
      channelId,
      ...voiceSettings,
      group: groupId
    };

    this.accountManager.updateAccount(accountIndex, updatedAccount);
    this.ui.showSuccess("ƒê√£ c·∫≠p nh·∫≠t t√†i kho·∫£n th√†nh c√¥ng! üîÑ");
    
    if (groupId !== account.group) {
      if (!groupId) {
        this.ui.showInfo("T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi nh√≥m.");
      } else {
        const groupName = groups.find(g => g.id === groupId)?.name || "Kh√¥ng t√™n";
        this.ui.showInfo(`T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c th√™m v√†o nh√≥m "${groupName}".`);
      }
    }
  }

  /**
   * Delete an account
   */
  private async deleteAccount(): Promise<void> {
    const accounts = this.accountManager.getAccounts();
    const groups = this.accountManager.getGroups();

    if (accounts.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë·ªÉ x√≥a.");
      return;
    }

    // Show account selection
    const { accountIndex } = groups.length > 0 
      ? await this.ui.showAccountSelectionWithGroups(accounts, groups)
      : await this.ui.showAccountSelection(accounts);

    // Confirm deletion
    const confirm = await this.ui.showConfirmDelete(accounts[accountIndex].name);
    
    if (confirm) {
      this.accountManager.deleteAccount(accountIndex);
      this.ui.showSuccess("ƒê√£ x√≥a t√†i kho·∫£n th√†nh c√¥ng! üóëÔ∏è");
    } else {
      this.ui.showInfo("ƒê√£ h·ªßy x√≥a t√†i kho·∫£n.");
    }
  }

  /**
   * Show status monitor to track all connected accounts
   */
  private async showStatusMonitor(): Promise<void> {
    const runningClients = this.discordManager.getRunningClients();
    
    if (runningClients.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒëang k·∫øt n·ªëi. Vui l√≤ng k·∫øt n·ªëi tr∆∞·ªõc khi theo d√µi tr·∫°ng th√°i.");
      return;
    }

    // Clear screen
    console.clear();
    this.ui.showBanner();
    this.ui.showInfo("=== B·∫£ng Theo D√µi Tr·∫°ng Th√°i K·∫øt N·ªëi ===");
    this.ui.showInfo("Nh·∫•n Ctrl+C ƒë·ªÉ tr·ªü v·ªÅ menu ch√≠nh");
    
    // Display initial status
    this.displayAccountStatus();
    
    // Set up interval to refresh status
    if (this.statusMonitorInterval) {
      clearInterval(this.statusMonitorInterval);
    }
    
    this.statusMonitorInterval = setInterval(() => {
      console.clear();
      this.ui.showBanner();
      this.ui.showInfo("=== B·∫£ng Theo D√µi Tr·∫°ng Th√°i K·∫øt N·ªëi ===");
      this.ui.showInfo("Nh·∫•n Ctrl+C ƒë·ªÉ tr·ªü v·ªÅ menu ch√≠nh");
      this.displayAccountStatus();
    }, 5000); // Refresh every 5 seconds
    
    // Wait for user to press any key
    await new Promise<void>((resolve) => {
      process.stdin.setRawMode(true);
      process.stdin.resume();
      process.stdin.on('data', () => {
        if (this.statusMonitorInterval) {
          clearInterval(this.statusMonitorInterval);
          this.statusMonitorInterval = null;
        }
        process.stdin.setRawMode(false);
        process.stdin.pause();
        resolve();
      });
    });
  }

  /**
   * Format uptime from milliseconds to readable format
   */
  private formatUptime(ms: number): string {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    
    return `${hours}h ${minutes % 60}m ${seconds % 60}s`;
  }

  /**
   * Display status of all connected accounts with improved visuals
   */
  private displayAccountStatus(): void {
    const runningClients = this.discordManager.getRunningClients();
    const groups = this.accountManager.getGroups();
    const totalAccounts = this.accountManager.getAccounts().length;
    
    // Create a map for faster group lookup
    const groupMap = new Map<string, Group>();
    for (const group of groups) {
      groupMap.set(group.id, group);
    }
    
    // Show header with stats
    console.log('\n');
    console.log(this.ui.createStatusHeader(runningClients.length, totalAccounts));
    
    // Group clients by their group
    const groupedClients = new Map<string, typeof runningClients>();
    
    // Add "Ungrouped" category
    groupedClients.set('ungrouped', []);
    
    // Initialize groups
    groups.forEach(group => {
      groupedClients.set(group.id, []);
    });
    
    // Categorize clients by group
    runningClients.forEach(client => {
      const groupId = client.account.group;
      if (groupId && groupedClients.has(groupId)) {
        groupedClients.get(groupId)!.push(client);
      } else {
        groupedClients.get('ungrouped')!.push(client);
      }
    });
    
    // Display clients by group
    groupedClients.forEach((clients, groupId) => {
      if (clients.length === 0) return; // Skip empty groups
      
      // Get group name
      let groupName = "Ch∆∞a ph√¢n nh√≥m";
      if (groupId !== 'ungrouped') {
        const group = groupMap.get(groupId);
        if (group) {
          groupName = group.name;
        }
      }
      
      // Show group header
      console.log(this.ui.createGroupHeader(groupName, clients.length));
      
      // Display accounts in this group
      clients.forEach((client, index) => {
        const { account } = client;
        const discordClient = client.client;
        
        // Get guild and channel info
        const guild = discordClient.guilds.cache.get(account.guildId);
        const channel = guild?.channels.cache.get(account.channelId);
        
        // Check connection status
        const isConnected = (discordClient.voice?.connection && discordClient.voice.connection.channel.id === account.channelId) || false;
        
        // Calculate uptime
        const uptime = discordClient.readyTimestamp 
          ? this.formatUptime(Date.now() - discordClient.readyTimestamp) 
          : 'N/A';
        
        // Display account status card
        console.log(this.ui.createAccountStatusCard(
          index + 1,
          account.name || 'Kh√¥ng t√™n',
          discordClient.user?.tag || 'Unknown',
          guild?.name || 'Kh√¥ng t√¨m th·∫•y',
          channel?.name || 'Kh√¥ng t√¨m th·∫•y',
          isConnected,
          uptime,
          account.selfMute,
          account.selfDeaf,
          account.selfVideo
        ));
      });
      
      // Add separator between groups
      console.log(this.ui.separator());
    });
    
    // Show footer with help text
    console.log(this.ui.createStatusFooter());
  }

  /**
   * Manage account schedules
   */
  private async manageSchedules(): Promise<void> {
    const accounts = this.accountManager.getAccounts();
    
    if (accounts.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë·ªÉ l√™n l·ªãch. Vui l√≤ng th√™m t√†i kho·∫£n tr∆∞·ªõc.");
      return;
    }
    
    // Show schedule management menu
    const { action } = await this.ui.prompt<{ action: string }>([
      {
        type: 'list',
        name: 'action',
        message: 'Qu·∫£n l√Ω l·ªãch k·∫øt n·ªëi t·ª± ƒë·ªông:',
        choices: [
          { name: 'Xem danh s√°ch l·ªãch k·∫øt n·ªëi', value: 'viewSchedules' },
          { name: 'Th√™m l·ªãch k·∫øt n·ªëi m·ªõi', value: 'addSchedule' },
          { name: 'X√≥a l·ªãch k·∫øt n·ªëi', value: 'removeSchedule' },
          { name: 'K√≠ch ho·∫°t t·∫•t c·∫£ l·ªãch k·∫øt n·ªëi', value: 'activateSchedules' },
          { name: 'L√™n l·ªãch theo nh√≥m', value: 'scheduleByGroup' },
          { name: 'Quay l·∫°i', value: 'back' }
        ]
      }
    ]);
    
    switch (action) {
      case 'viewSchedules':
        this.viewSchedules();
        break;
      case 'addSchedule':
        await this.addSchedule();
        break;
      case 'removeSchedule':
        await this.removeSchedule();
        break;
      case 'activateSchedules':
        this.activateSchedules();
        break;
      case 'scheduleByGroup':
        await this.scheduleByGroup();
        break;
      case 'back':
        return;
    }

    // Return to schedule management menu after action
    await this.manageSchedules();
  }
  
  /**
   * View all scheduled accounts
   */
  private viewSchedules(): void {
    const schedules = this.accountManager.getSchedules();
    const groups = this.accountManager.getGroups();
    
    // Create a map for faster group lookup
    const groupMap = new Map<string, Group>();
    for (const group of groups) {
      groupMap.set(group.id, group);
    }
    
    if (schedules.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ l·ªãch k·∫øt n·ªëi n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p.");
      return;
    }
    
    this.ui.showInfo("=== Danh s√°ch l·ªãch k·∫øt n·ªëi t·ª± ƒë·ªông ===");
    
    // Create readable table for display
    const table: {
      STT: number;
      'T√™n t√†i kho·∫£n': string;
      'Nh√≥m': string;
      'Gi·ªù k·∫øt n·ªëi': string;
      'Gi·ªù ng·∫Øt k·∫øt n·ªëi': string;
      'Ng√†y trong tu·∫ßn': string;
    }[] = [];
    
    // Day mapping for better readability
    const daysMap = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
    
    schedules.forEach((schedule, index) => {
      // Get account to find group
      const account = this.accountManager.getAccount(schedule.accountIndex);
      let groupName = "Kh√¥ng c√≥";
      if (account.group && groupMap.has(account.group)) {
        groupName = groupMap.get(account.group)!.name;
      }
      
      table.push({
        STT: index + 1,
        'T√™n t√†i kho·∫£n': schedule.accountName,
        'Nh√≥m': groupName,
        'Gi·ªù k·∫øt n·ªëi': schedule.connectTime || 'Ch∆∞a ƒë·∫∑t',
        'Gi·ªù ng·∫Øt k·∫øt n·ªëi': schedule.disconnectTime || 'Ch∆∞a ƒë·∫∑t',
        'Ng√†y trong tu·∫ßn': schedule.daysOfWeek ? 
          schedule.daysOfWeek.map(day => daysMap[day]).join(', ') : 
          'M·ªói ng√†y'
      });
    });
    
    console.table(table);
  }
  
  /**
   * Add a new schedule
   */
  private async addSchedule(): Promise<void> {
    const accounts = this.accountManager.getAccounts();
    const groups = this.accountManager.getGroups();
    
    // Show account selection with group info if available
    const { accountIndex } = groups.length > 0 
      ? await this.ui.showAccountSelectionWithGroups(accounts, groups)
      : await this.ui.showAccountSelection(accounts);
      
    const account = accounts[accountIndex];
    
    this.ui.showInfo(`Thi·∫øt l·∫≠p l·ªãch tr√¨nh cho t√†i kho·∫£n: ${account.name || "Kh√¥ng t√™n"}`);
    
    const { scheduleType } = await this.ui.prompt<{ scheduleType: string }>([
      {
        type: 'list',
        name: 'scheduleType',
        message: 'Ch·ªçn lo·∫°i l·ªãch:',
        choices: [
          { name: 'L·ªãch k·∫øt n·ªëi', value: 'connect' },
          { name: 'L·ªãch ng·∫Øt k·∫øt n·ªëi', value: 'disconnect' },
          { name: 'C·∫£ hai', value: 'both' }
        ]
      }
    ]);
    
    // Get days of week
    const { selectedDays } = await this.ui.prompt<{ selectedDays: number[] }>([
      {
        type: 'checkbox',
        name: 'selectedDays',
        message: 'Ch·ªçn ng√†y trong tu·∫ßn:',
        choices: [
          { name: 'Ch·ªß nh·∫≠t', value: 0 },
          { name: 'Th·ª© 2', value: 1 },
          { name: 'Th·ª© 3', value: 2 },
          { name: 'Th·ª© 4', value: 3 },
          { name: 'Th·ª© 5', value: 4 },
          { name: 'Th·ª© 6', value: 5 },
          { name: 'Th·ª© 7', value: 6 }
        ],
        default: [0, 1, 2, 3, 4, 5, 6]
      }
    ]);
    
    let connectTime: string | undefined;
    let disconnectTime: string | undefined;
    
    if (scheduleType === 'connect' || scheduleType === 'both') {
      const { time } = await this.ui.prompt<{ time: string }>([
        {
          type: 'input',
          name: 'time',
          message: 'Th·ªùi gian k·∫øt n·ªëi (HH:MM):',
          validate: (input: string) => {
            // Simple validation for HH:MM format
            const regex = /^([01]\d|2[0-3]):([0-5]\d)$/;
            if (!regex.test(input)) {
              return 'Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng HH:MM (v√≠ d·ª•: 08:30)';
            }
            return true;
          }
        }
      ]);
      connectTime = time;
    }
    
    if (scheduleType === 'disconnect' || scheduleType === 'both') {
      const { time } = await this.ui.prompt<{ time: string }>([
        {
          type: 'input',
          name: 'time',
          message: 'Th·ªùi gian ng·∫Øt k·∫øt n·ªëi (HH:MM):',
          validate: (input: string) => {
            // Simple validation for HH:MM format
            const regex = /^([01]\d|2[0-3]):([0-5]\d)$/;
            if (!regex.test(input)) {
              return 'Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng HH:MM (v√≠ d·ª•: 17:30)';
            }
            return true;
          }
        }
      ]);
      disconnectTime = time;
    }
    
    let result = false;
    
    // Set up schedules as requested
    if (connectTime) {
      result = this.accountManager.scheduleConnect(accountIndex, connectTime, selectedDays);
      if (result) {
        this.ui.showSuccess(`ƒê√£ thi·∫øt l·∫≠p l·ªãch k·∫øt n·ªëi cho t√†i kho·∫£n ${account.name || "Kh√¥ng t√™n"} v√†o l√∫c ${connectTime}`);
      } else {
        this.ui.showError(`Kh√¥ng th·ªÉ thi·∫øt l·∫≠p l·ªãch k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra l·∫°i th·ªùi gian.`);
      }
    }
    
    if (disconnectTime) {
      result = this.accountManager.scheduleDisconnect(accountIndex, disconnectTime, selectedDays);
      if (result) {
        this.ui.showSuccess(`ƒê√£ thi·∫øt l·∫≠p l·ªãch ng·∫Øt k·∫øt n·ªëi cho t√†i kho·∫£n ${account.name || "Kh√¥ng t√™n"} v√†o l√∫c ${disconnectTime}`);
      } else {
        this.ui.showError(`Kh√¥ng th·ªÉ thi·∫øt l·∫≠p l·ªãch ng·∫Øt k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra l·∫°i th·ªùi gian.`);
      }
    }
    
    // Confirm and activate if requested
    const { activate } = await this.ui.prompt<{ activate: boolean }>([
      {
        type: 'confirm',
        name: 'activate',
        message: 'B·∫°n c√≥ mu·ªën k√≠ch ho·∫°t l·ªãch n√†y ngay b√¢y gi·ªù kh√¥ng?',
        default: true
      }
    ]);
    
    if (activate) {
      this.activateSchedules();
    }
  }
  
  /**
   * Remove a schedule
   */
  private async removeSchedule(): Promise<void> {
    const schedules = this.accountManager.getSchedules();
    
    if (schedules.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ l·ªãch k·∫øt n·ªëi n√†o ƒë·ªÉ x√≥a.");
      return;
    }
    
    // Day mapping for better readability
    const daysMap = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
    
    // Show schedule selection
    const { scheduleIndex } = await this.ui.prompt<{ scheduleIndex: number }>([
      {
        type: 'list',
        name: 'scheduleIndex',
        message: 'Ch·ªçn l·ªãch k·∫øt n·ªëi ƒë·ªÉ x√≥a:',
        choices: schedules.map((schedule, index) => ({
          name: `${schedule.accountName} - K·∫øt n·ªëi: ${schedule.connectTime || 'Ch∆∞a ƒë·∫∑t'}, Ng·∫Øt: ${schedule.disconnectTime || 'Ch∆∞a ƒë·∫∑t'} - ${schedule.daysOfWeek ? schedule.daysOfWeek.map(d => daysMap[d]).join(', ') : 'M·ªói ng√†y'}`,
          value: index
        }))
      }
    ]);
    
    // Confirm deletion
    const { confirm } = await this.ui.prompt<{ confirm: boolean }>([
      {
        type: 'confirm',
        name: 'confirm',
        message: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a l·ªãch k·∫øt n·ªëi n√†y?`,
        default: false
      }
    ]);
    
    if (confirm) {
      this.accountManager.removeSchedule(schedules[scheduleIndex].accountIndex);
      this.ui.showSuccess("ƒê√£ x√≥a l·ªãch k·∫øt n·ªëi th√†nh c√¥ng!");
    } else {
      this.ui.showInfo("ƒê√£ h·ªßy x√≥a l·ªãch k·∫øt n·ªëi.");
    }
  }

  /**
   * Schedule connections by group
   */
  private async scheduleByGroup(): Promise<void> {
    const groups = this.accountManager.getGroups();
    
    if (groups.length === 0) {
      this.ui.showWarning("Kh√¥ng c√≥ nh√≥m n√†o ƒë·ªÉ l√™n l·ªãch. Vui l√≤ng t·∫°o nh√≥m tr∆∞·ªõc.");
      return;
    }

    // Add "ungrouped accounts" option
    const groupChoices = [
      ...groups.map(group => ({
        name: `${group.name}${group.description ? ` - ${group.description}` : ''} (${this.accountManager.getAccountsByGroup(group.id).length} t√†i kho·∫£n)`,
        value: group.id
      })),
      {
        name: `T√†i kho·∫£n ch∆∞a ph√¢n nh√≥m (${this.accountManager.getUngroupedAccounts().length} t√†i kho·∫£n)`,
        value: 'ungrouped'
      }
    ];

    try {
      // Show group selection
      const { selectedGroup } = await this.ui.prompt<{ selectedGroup: string }>([
        {
          type: 'list',
          name: 'selectedGroup',
          message: 'Ch·ªçn nh√≥m ƒë·ªÉ l√™n l·ªãch:',
          choices: groupChoices
        }
      ]);

      // Get accounts in selected group
      let accountsToSchedule: Account[];
      let groupName: string;
      
      if (selectedGroup === 'ungrouped') {
        accountsToSchedule = this.accountManager.getUngroupedAccounts();
        groupName = "Ch∆∞a ph√¢n nh√≥m";
      } else {
        accountsToSchedule = this.accountManager.getAccountsByGroup(selectedGroup);
        groupName = groups.find(g => g.id === selectedGroup)?.name || "Nh√≥m kh√¥ng x√°c ƒë·ªãnh";
      }

      if (accountsToSchedule.length === 0) {
        this.ui.showWarning(`Kh√¥ng c√≥ t√†i kho·∫£n n√†o trong nh√≥m "${groupName}".`);
        return;
      }

      this.ui.showInfo(`Thi·∫øt l·∫≠p l·ªãch tr√¨nh cho nh√≥m: ${groupName} (${accountsToSchedule.length} t√†i kho·∫£n)`);
      
      const { scheduleType } = await this.ui.prompt<{ scheduleType: string }>([
        {
          type: 'list',
          name: 'scheduleType',
          message: 'Ch·ªçn lo·∫°i l·ªãch:',
          choices: [
            { name: 'L·ªãch k·∫øt n·ªëi', value: 'connect' },
            { name: 'L·ªãch ng·∫Øt k·∫øt n·ªëi', value: 'disconnect' },
            { name: 'C·∫£ hai', value: 'both' }
          ]
        }
      ]);
      
      // Get days of week
      const { selectedDays } = await this.ui.prompt<{ selectedDays: number[] }>([
        {
          type: 'checkbox',
          name: 'selectedDays',
          message: 'Ch·ªçn ng√†y trong tu·∫ßn:',
          choices: [
            { name: 'Ch·ªß nh·∫≠t', value: 0 },
            { name: 'Th·ª© 2', value: 1 },
            { name: 'Th·ª© 3', value: 2 },
            { name: 'Th·ª© 4', value: 3 },
            { name: 'Th·ª© 5', value: 4 },
            { name: 'Th·ª© 6', value: 5 },
            { name: 'Th·ª© 7', value: 6 }
          ],
          default: [0, 1, 2, 3, 4, 5, 6]
        }
      ]);
      
      let connectTime: string | undefined;
      let disconnectTime: string | undefined;
      
      if (scheduleType === 'connect' || scheduleType === 'both') {
        const { time } = await this.ui.prompt<{ time: string }>([
          {
            type: 'input',
            name: 'time',
            message: 'Th·ªùi gian k·∫øt n·ªëi (HH:MM):',
          validate: (input: string) => {
              // Simple validation for HH:MM format
              const regex = /^([01]\d|2[0-3]):([0-5]\d)$/;
              if (!regex.test(input)) {
                return 'Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng HH:MM (v√≠ d·ª•: 08:30)';
              }
              return true;
            }
          }
        ]);
        connectTime = time;
      }
      
      if (scheduleType === 'disconnect' || scheduleType === 'both') {
        const { time } = await this.ui.prompt<{ time: string }>([
          {
            type: 'input',
            name: 'time',
            message: 'Th·ªùi gian ng·∫Øt k·∫øt n·ªëi (HH:MM):',
            validate: (input: string) => {
              // Simple validation for HH:MM format
              const regex = /^([01]\d|2[0-3]):([0-5]\d)$/;
              if (!regex.test(input)) {
                return 'Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng HH:MM (v√≠ d·ª•: 17:30)';
              }
              return true;
            }
          }
        ]);
        disconnectTime = time;
      }
      
      // Confirm action
      const { confirm } = await this.ui.prompt<{ confirm: boolean }>([
        {
          type: 'confirm',
          name: 'confirm',
          message: `Thi·∫øt l·∫≠p l·ªãch cho ${accountsToSchedule.length} t√†i kho·∫£n trong nh√≥m "${groupName}"?`,
          default: true
        }
      ]);

      if (!confirm) {
        this.ui.showInfo("ƒê√£ h·ªßy thi·∫øt l·∫≠p l·ªãch.");
        return;
      }
      
      // Apply schedule to all accounts in group
      let connectSuccess = 0;
      let disconnectSuccess = 0;
      
      const spinner = this.ui.createSpinner(`ƒêang thi·∫øt l·∫≠p l·ªãch cho ${accountsToSchedule.length} t√†i kho·∫£n...`);
      spinner.start();
      
      for (const account of accountsToSchedule) {
        const accountIndex = this.accountManager.getAccounts().findIndex(a => a.token === account.token);
        if (accountIndex === -1) continue;
        
        if (connectTime && this.accountManager.scheduleConnect(accountIndex, connectTime, selectedDays)) {
          connectSuccess++;
        }
        
        if (disconnectTime && this.accountManager.scheduleDisconnect(accountIndex, disconnectTime, selectedDays)) {
          disconnectSuccess++;
        }
      }
      
      spinner.succeed(`ƒê√£ ho√†n t·∫•t thi·∫øt l·∫≠p l·ªãch!`);
      
      if (connectTime) {
        this.ui.showSuccess(`ƒê√£ thi·∫øt l·∫≠p l·ªãch k·∫øt n·ªëi cho ${connectSuccess}/${accountsToSchedule.length} t√†i kho·∫£n v√†o l√∫c ${connectTime}`);
      }
      
      if (disconnectTime) {
        this.ui.showSuccess(`ƒê√£ thi·∫øt l·∫≠p l·ªãch ng·∫Øt k·∫øt n·ªëi cho ${disconnectSuccess}/${accountsToSchedule.length} t√†i kho·∫£n v√†o l√∫c ${disconnectTime}`);
      }
      
      // Confirm and activate if requested
      const { activate } = await this.ui.prompt<{ activate: boolean }>([
        {
          type: 'confirm',
          name: 'activate',
          message: 'B·∫°n c√≥ mu·ªën k√≠ch ho·∫°t c√°c l·ªãch n√†y ngay b√¢y gi·ªù kh√¥ng?',
          default: true
        }
      ]);
      
      if (activate) {
        this.activateSchedules();
      }
    } catch (error) {
      this.ui.showError(`L·ªói khi l√™n l·ªãch theo nh√≥m: ${error}`);
    }
  }
  
  /**
   * Activate all schedules
   */
  private activateSchedules(): void {
    // Connect account callback
    const connectCallback = async (account: Account) => {
      this.ui.showInfo(`ƒêang t·ª± ƒë·ªông k·∫øt n·ªëi t√†i kho·∫£n ${account.name || "Kh√¥ng t√™n"} theo l·ªãch...`);
      await this.discordManager.connectAccount(account);
    };
    
    // Disconnect account callback
    const disconnectCallback = (account: Account) => {
      this.ui.showInfo(`ƒêang t·ª± ƒë·ªông ng·∫Øt k·∫øt n·ªëi t√†i kho·∫£n ${account.name || "Kh√¥ng t√™n"} theo l·ªãch...`);
      
      // Find the running client for this account
      const runningClients = this.discordManager.getRunningClients();
      const clientToDisconnect = runningClients.find(
        rc => rc.account.token === account.token
      );
      
      if (clientToDisconnect) {
        // Disconnect the specific client
        if (clientToDisconnect.client.voice?.connection) {
          clientToDisconnect.client.voice.connection.disconnect();
        }
        clientToDisconnect.client.destroy();
        
        // Remove from running clients
        const index = runningClients.indexOf(clientToDisconnect);
        if (index !== -1) {
          runningClients.splice(index, 1);
        }
        
        this.ui.showSuccess(`ƒê√£ ng·∫Øt k·∫øt n·ªëi t√†i kho·∫£n ${account.name || "Kh√¥ng t√™n"}`);
      }
    };
    
    // Activate the scheduler
    this.accountManager.activateScheduler(connectCallback, disconnectCallback);
    this.ui.showSuccess("ƒê√£ k√≠ch ho·∫°t l·ªãch k·∫øt n·ªëi t·ª± ƒë·ªông!");
  }
}