import chalk from 'chalk';
import figlet from 'figlet';
import boxen from 'boxen';
import ora from 'ora';
import inquirer from 'inquirer';
import gradient from 'gradient-string';
import { 
  IUserInterface, 
  Account, 
  MainMenuAnswer, 
  AccountSelection,
  ConfirmDelete,
  Group
} from '../types';

export class UserInterface implements IUserInterface {
  constructor() {}

  // Display the banner
  showBanner(): void {
    console.clear();
    console.log('\n');
    
    // Create gradient banner
    const title = figlet.textSync('Discord AutoVoice', {
      font: 'Standard',
      horizontalLayout: 'default',
      verticalLayout: 'default'
    });
    
    console.log(gradient.pastel.multiline(title));
    
    console.log(
      boxen(chalk.blue('Phi√™n b·∫£n:') + ' ' + chalk.green('1.1.0') + '\n' +
            chalk.blue('T√°c gi·∫£:  ') + ' ' + chalk.green('Hanh') + '\n' +
            chalk.yellow('‚ú® K·∫øt n·ªëi ƒë·ªìng th·ªùi nhi·ªÅu t√†i kho·∫£n Discord v√†o voice ‚ú®'), 
            { 
              padding: 1, 
              margin: { top: 1, bottom: 1 },
              borderStyle: 'round',
              borderColor: 'cyan',
              backgroundColor: '#222222'
            })
    );
  }

  // Generic prompt method for any type of inquirer questions
  async prompt<T>(questions: any[]): Promise<T> {
    return inquirer.prompt(questions) as unknown as T;
  }

  // Show the main menu
  async showMainMenu(): Promise<MainMenuAnswer> {
    return this.prompt<MainMenuAnswer>([
      {
        type: 'list',
        name: 'action',
        message: chalk.cyan('‚ú® Ch·ªçn h√†nh ƒë·ªông:'),
        choices: [
          { name: 'üìû K·∫øt n·ªëi t·∫•t c·∫£ t√†i kho·∫£n', value: 'connectAll' },
          { name: 'üì± K·∫øt n·ªëi m·ªôt t√†i kho·∫£n c·ª• th·ªÉ', value: 'connectOne' },
          { name: 'üë• Qu·∫£n l√Ω nh√≥m t√†i kho·∫£n', value: 'manageGroups' },
          { name: 'üÜï Th√™m t√†i kho·∫£n m·ªõi', value: 'addAccount' },
          { name: '‚úèÔ∏è Ch·ªânh s·ª≠a t√†i kho·∫£n', value: 'editAccount' },
          { name: 'üóëÔ∏è X√≥a t√†i kho·∫£n', value: 'deleteAccount' },
          { name: 'üîå Ng·∫Øt k·∫øt n·ªëi t·∫•t c·∫£', value: 'disconnectAll' },
          { name: 'üìä B·∫£ng theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi', value: 'statusMonitor' },
          { name: '‚è∞ Qu·∫£n l√Ω l·ªãch k·∫øt n·ªëi t·ª± ƒë·ªông', value: 'scheduleAccounts' },
          { name: 'üîí C√†i ƒë·∫∑t b·∫£o m·∫≠t', value: 'securitySettings' },
          { name: 'üö™ Tho√°t', value: 'exit' }
        ],
        pageSize: 12
      }
    ]);
  }

  // Show group management menu
  async showGroupManagementMenu(): Promise<{ action: string }> {
    return this.prompt<{ action: string }>([
      {
        type: 'list',
        name: 'action',
        message: chalk.cyan('üë• Qu·∫£n l√Ω nh√≥m t√†i kho·∫£n:'),
        choices: [
          { name: 'üëÄ Xem danh s√°ch nh√≥m', value: 'viewGroups' },
          { name: '‚ûï T·∫°o nh√≥m m·ªõi', value: 'createGroup' },
          { name: '‚úèÔ∏è Ch·ªânh s·ª≠a nh√≥m', value: 'editGroup' },
          { name: 'üóëÔ∏è X√≥a nh√≥m', value: 'deleteGroup' },
          { name: 'üì• Th√™m t√†i kho·∫£n v√†o nh√≥m', value: 'addAccountToGroup' },
          { name: 'üì§ X√≥a t√†i kho·∫£n kh·ªèi nh√≥m', value: 'removeAccountFromGroup' },
          { name: 'üìû K·∫øt n·ªëi t√†i kho·∫£n theo nh√≥m', value: 'connectByGroup' },
          { name: 'üîô Quay l·∫°i', value: 'back' }
        ],
        pageSize: 10
      }
    ]);
  }

  // Show group selection menu
  async showGroupSelection(groups: Group[]): Promise<{ groupId: string }> {
    if (groups.length === 0) {
      throw new Error("Kh√¥ng c√≥ nh√≥m n√†o");
    }
    
    return this.prompt<{ groupId: string }>([
      {
        type: 'list',
        name: 'groupId',
        message: chalk.cyan('üìÅ Ch·ªçn nh√≥m:'),
        choices: groups.map(group => ({
          name: `${chalk.yellow(group.name)}${group.description ? chalk.dim(` - ${group.description}`) : ''}`,
          value: group.id
        }))
      }
    ]);
  }

  // Show account selection with group info
  async showAccountSelectionWithGroups(accounts: Account[], groups: Group[]): Promise<AccountSelection> {
    // Create a mapping of group IDs to group names
    const groupMap = new Map<string, string>();
    for (const group of groups) {
      groupMap.set(group.id, group.name);
    }
    
    return this.prompt<AccountSelection>([
      {
        type: 'list',
        name: 'accountIndex',
        message: chalk.cyan('üë§ Ch·ªçn t√†i kho·∫£n:'),
        choices: accounts.map((acc, index) => {
          const groupName = acc.group ? groupMap.get(acc.group) : undefined;
          const label = this.formatAccountName(acc.name, acc.token);
          const groupInfo = groupName ? chalk.magenta(` [${groupName}]`) : '';
          
          return {
            name: `${label}${groupInfo}`,
            value: index,
          };
        }),
        pageSize: 15
      }
    ]);
  }

  // Show account selection menu
  async showAccountSelection(accounts: Account[]): Promise<AccountSelection> {
    return this.prompt<AccountSelection>([
      {
        type: 'list',
        name: 'accountIndex',
        message: chalk.cyan('üë§ Ch·ªçn t√†i kho·∫£n:'),
        choices: accounts.map((acc, index) => ({
          name: this.formatAccountName(acc.name, acc.token),
          value: index,
        })),
        pageSize: 15
      }
    ]);
  }

  // Show account creation form
  async showAccountCreationForm(accountCount: number): Promise<Account> {
    // This would be implemented with inquirer forms for account creation
    // For now it's a placeholder - implement based on your requirements
    throw new Error("Method not implemented yet");
  }

  // Show account edit form
  async showAccountEditForm(account: Account): Promise<Account> {
    // This would be implemented with inquirer forms for account editing
    // For now it's a placeholder - implement based on your requirements
    throw new Error("Method not implemented yet");
  }

  // Show delete confirmation
  async showConfirmDelete(accountName: string): Promise<boolean> {
    const { confirm } = await this.prompt<ConfirmDelete>([
      {
        type: 'confirm',
        name: 'confirm',
        message: chalk.yellow(`‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t√†i kho·∫£n "${accountName || 'Kh√¥ng t√™n'}"?`),
        default: false,
      }
    ]);
    return confirm;
  }

  // Format account name for display
  formatAccountName(name: string, token: string): string {
    if (!name || name.trim() === '') {
      return chalk.grey('T√†i kho·∫£n kh√¥ng t√™n') + chalk.dim(` (${token.substring(0, 10)}...)`);
    }
    return chalk.green(name) + chalk.dim(` (${token.substring(0, 10)}...)`);
  }

  // Display success message
  showSuccess(message: string): void {
    console.log(chalk.green('‚úÖ ') + message);
  }

  // Display error message
  showError(message: string): void {
    console.log(chalk.red('‚ùå ') + message);
  }

  // Display warning message
  showWarning(message: string): void {
    console.log(chalk.yellow('‚ö†Ô∏è  ') + message);
  }

  // Display info message
  showInfo(message: string): void {
    console.log(chalk.blue('‚ÑπÔ∏è  ') + message);
  }

  // Create a spinner for loading states
  createSpinner(message: string): any {
    return ora({
      text: message,
      color: 'cyan',
      spinner: 'dots'
    });
  }

  // Create status box for accounts
  accountStatusBox(connected: number, total: number): string {
    let statusText = chalk.blue(`T√†i kho·∫£n ƒëang k·∫øt n·ªëi: `) + 
                   chalk.green(`${connected}`) + 
                   chalk.blue(`/${total}`);
                   
    return boxen(statusText, {
      padding: 0.5,
      margin: { bottom: 1 },
      borderStyle: 'round',
      borderColor: 'blue',
      backgroundColor: '#222222'
    });
  }

  // Create menu group header
  menuGroupBox(title: string): string {
    return chalk.cyan('‚îå‚îÄ ' + chalk.bold(title) + ' ');
  }

  // Create separator line
  separator(): string {
    return chalk.cyan('‚îÄ'.repeat(70));
  }

  // Create status header with stats
  createStatusHeader(connected: number, total: number): string {
    const progressBar = this.createProgressBar(connected, total, 40);
    
    return boxen(
      chalk.bold.cyan('Th·ªëng k√™ k·∫øt n·ªëi') + '\n\n' +
      chalk.blue(`T√†i kho·∫£n ƒëang k·∫øt n·ªëi: `) + chalk.green(`${connected}`) + chalk.white(`/${total}`) + '\n' +
      progressBar + '\n' +
      chalk.dim(`Th·ªùi gian c·∫≠p nh·∫≠t: ${new Date().toLocaleTimeString()}`),
      {
        padding: 1,
        margin: { top: 0, bottom: 1 },
        borderStyle: 'round',
        borderColor: 'cyan',
        backgroundColor: '#222222',
        width: 60
      }
    );
  }

  // Create progress bar
  createProgressBar(current: number, total: number, width: number): string {
    const percentage = Math.round((current / total) * 100);
    const filledWidth = Math.round((current / total) * width);
    const emptyWidth = width - filledWidth;
    
    const filled = '‚ñà'.repeat(filledWidth);
    const empty = '‚ñë'.repeat(emptyWidth);
    
    return `${chalk.cyan(filled)}${chalk.grey(empty)} ${chalk.yellow(percentage + '%')}`;
  }

  // Create group header for status display
  createGroupHeader(groupName: string, accountCount: number): string {
    return boxen(
      chalk.bold.yellow(`${groupName}`) + chalk.cyan(` (${accountCount} t√†i kho·∫£n)`),
      {
        padding: { top: 0, bottom: 0, left: 1, right: 1 },
        margin: { top: 1, bottom: 0 },
        borderStyle: 'round',
        borderColor: 'yellow',
        backgroundColor: '#222222',
      }
    );
  }

  // Create account status card for connected accounts
  createAccountStatusCard(
    index: number,
    name: string,
    tag: string,
    serverName: string,
    channelName: string,
    isConnected: boolean,
    uptime: string,
    selfMute: boolean,
    selfDeaf: boolean,
    selfVideo: boolean
  ): string {
    // Status indicators
    const connectionStatus = isConnected 
      ? chalk.green('‚óè') + ' ƒê√£ k·∫øt n·ªëi'
      : chalk.red('‚óè') + ' M·∫•t k·∫øt n·ªëi';
      
    const muteStatus = selfMute 
      ? chalk.red('üîá T·∫Øt mic')
      : chalk.green('üé§ Mic b·∫≠t');
      
    const deafStatus = selfDeaf
      ? chalk.red('üîà T·∫Øt loa')
      : chalk.green('üîä Loa b·∫≠t');
      
    const videoStatus = selfVideo
      ? chalk.green('üìπ Cam b·∫≠t')
      : chalk.dim('üì∑ Cam t·∫Øt');
      
    return boxen(
      chalk.bold.white(`#${index}. ${name}`) + '\n' +
      chalk.dim(`Tag: ${tag}`) + '\n\n' +
      chalk.blue(`Server: `) + chalk.white(serverName) + '\n' +
      chalk.blue(`K√™nh: `) + chalk.white(channelName) + '\n' +
      chalk.blue(`K·∫øt n·ªëi: `) + connectionStatus + `  ${chalk.blue('Ho·∫°t ƒë·ªông:')} ${chalk.green(uptime)}` + '\n' +
      muteStatus + '  ' + deafStatus + '  ' + videoStatus,
      {
        padding: 1,
        margin: { top: 0, bottom: 1, left: 0, right: 0 },
        borderStyle: 'round',
        borderColor: isConnected ? 'green' : 'red',
        float: 'left',
        backgroundColor: '#222222',
        width: 60
      }
    );
  }

  // Create footer for status display
  createStatusFooter(): string {
    return boxen(
      chalk.cyan('Tr·ª£ gi√∫p: ') + 
      chalk.white('Nh·∫•n ') + chalk.yellow('Ctrl+C') + chalk.white(' ƒë·ªÉ tr·ªü v·ªÅ menu ch√≠nh\n') +
      chalk.cyan('C·∫≠p nh·∫≠t: ') + chalk.white('Giao di·ªán t·ª± ƒë·ªông l√†m m·ªõi m·ªói 5 gi√¢y'),
      {
        padding: 1,
        margin: { top: 1, bottom: 1 },
        borderStyle: 'round',
        borderColor: 'blue',
        backgroundColor: '#222222',
        width: 60
      }
    );
  }
}

// Export utility functions to maintain backward compatibility
export const ui = new UserInterface();
export const showBanner = ui.showBanner.bind(ui);
export const showSuccess = ui.showSuccess.bind(ui);
export const showError = ui.showError.bind(ui);
export const showWarning = ui.showWarning.bind(ui);
export const showInfo = ui.showInfo.bind(ui);
export const createSpinner = ui.createSpinner.bind(ui);
export const formatAccountName = ui.formatAccountName.bind(ui);
export const accountStatusBox = ui.accountStatusBox.bind(ui);
export const menuGroupBox = ui.menuGroupBox.bind(ui);
export const separator = ui.separator.bind(ui);